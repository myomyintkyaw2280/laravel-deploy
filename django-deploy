## **üöÄ Deploying Django on AWS Lightsail (Ubuntu 22.04)**
Since you‚Äôre deploying Django on **AWS Lightsail**, we‚Äôll use an **Ubuntu 22.04** instance, **Nginx**, **Gunicorn**, **PostgreSQL/MySQL**, and **Let's Encrypt SSL**.

---

## **1Ô∏è‚É£ Create an AWS Lightsail Instance**
1. **Go to AWS Lightsail** ‚Üí [Lightsail Console](https://lightsail.aws.amazon.com/)
2. Click **Create Instance**.
3. Choose **Linux/Ubuntu 22.04**.
4. Select an instance plan (start with **$5/month** for small projects).
5. Set an **instance name** (e.g., `django-app`).
6. Click **Create Instance**.
7. Once the instance is running, go to **Networking** ‚Üí **Add Static IP**.

---

## **2Ô∏è‚É£ Connect to the Server via SSH**
Open your terminal and connect via SSH:
```sh
ssh ubuntu@your-lightsail-ip
```

---

## **3Ô∏è‚É£ Update Server & Install Dependencies**
```sh
sudo apt update && sudo apt upgrade -y
sudo apt install -y python3-pip python3-dev python3-venv nginx git
```

---

## **4Ô∏è‚É£ Clone Django Project**
Upload or clone your Django project to **/var/www/**:
```sh
cd /var/www
git clone https://github.com/yourusername/your-django-project.git
cd your-django-project
```

---

## **5Ô∏è‚É£ Set Up Python Virtual Environment**
```sh
python3 -m venv venv
source venv/bin/activate
pip install --upgrade pip
pip install -r requirements.txt
```

---

## **6Ô∏è‚É£ Configure Django Settings**
### **üîπ Edit `.env` or `settings.py`**
- Set the **allowed hosts** in `settings.py`:
```python
ALLOWED_HOSTS = ['your-lightsail-ip', 'yourdomain.com']
```

- Set up **database connection** (PostgreSQL or MySQL):
```python
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'your_db_name',
        'USER': 'your_db_user',
        'PASSWORD': 'your_db_password',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}
```

- Set **static & media files**:
```python
STATIC_ROOT = "/var/www/your-django-project/static"
MEDIA_ROOT = "/var/www/your-django-project/media"
```

---

## **7Ô∏è‚É£ Set Up Database**
### **üîπ Install PostgreSQL (or MySQL)**
```sh
sudo apt install -y postgresql postgresql-contrib
sudo -u postgres psql
```
Create a database:
```sql
CREATE DATABASE your_db_name;
CREATE USER your_db_user WITH PASSWORD 'your_db_password';
ALTER ROLE your_db_user SET client_encoding TO 'utf8';
ALTER ROLE your_db_user SET default_transaction_isolation TO 'read committed';
ALTER ROLE your_db_user SET timezone TO 'UTC';
GRANT ALL PRIVILEGES ON DATABASE your_db_name TO your_db_user;
\q
```

Apply migrations:
```sh
python manage.py migrate
```

---

## **8Ô∏è‚É£ Collect Static Files**
```sh
python manage.py collectstatic --noinput
```

---

## **9Ô∏è‚É£ Set Up Gunicorn (WSGI Server)**
```sh
pip install gunicorn
```
Test Gunicorn:
```sh
gunicorn --bind 0.0.0.0:8000 yourproject.wsgi
```
If it works, stop it (**Ctrl + C**) and create a **Gunicorn service**:
```sh
sudo nano /etc/systemd/system/gunicorn.service
```
Add:
```ini
[Unit]
Description=Gunicorn daemon for Django project
After=network.target

[Service]
User=ubuntu
Group=www-data
WorkingDirectory=/var/www/your-django-project
ExecStart=/var/www/your-django-project/venv/bin/gunicorn --workers 3 --bind unix:/var/www/your-django-project/gunicorn.sock yourproject.wsgi:application

[Install]
WantedBy=multi-user.target
```
Enable and start Gunicorn:
```sh
sudo systemctl start gunicorn
sudo systemctl enable gunicorn
```

---

## **üîü Set Up Nginx (Reverse Proxy)**
```sh
sudo nano /etc/nginx/sites-available/yourproject
```
Add:
```nginx
server {
    listen 80;
    server_name yourdomain.com;

    location / {
        proxy_pass http://unix:/var/www/your-django-project/gunicorn.sock;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /static/ {
        alias /var/www/your-django-project/static/;
    }

    location /media/ {
        alias /var/www/your-django-project/media/;
    }
}
```
Enable site and restart Nginx:
```sh
sudo ln -s /etc/nginx/sites-available/yourproject /etc/nginx/sites-enabled/
sudo systemctl restart nginx
```

---

## **1Ô∏è‚É£1Ô∏è‚É£ Secure with Let's Encrypt SSL**
```sh
sudo apt install certbot python3-certbot-nginx -y
sudo certbot --nginx -d yourdomain.com
```
**Auto-renew SSL:**
```sh
sudo certbot renew --dry-run
```

---

## **1Ô∏è‚É£2Ô∏è‚É£ Configure Firewall**
Allow Nginx:
```sh
sudo ufw allow OpenSSH
sudo ufw allow 'Nginx Full'
sudo ufw enable
```

---

## **1Ô∏è‚É£3Ô∏è‚É£ Set Up Supervisor for Gunicorn (Optional)**
```sh
sudo apt install supervisor -y
sudo nano /etc/supervisor/conf.d/gunicorn.conf
```
Add:
```
[program:gunicorn]
command=/var/www/your-django-project/venv/bin/gunicorn --workers 3 --bind unix:/var/www/your-django-project/gunicorn.sock yourproject.wsgi:application
directory=/var/www/your-django-project
autostart=true
autorestart=true
stderr_logfile=/var/www/your-django-project/logs/gunicorn.err.log
stdout_logfile=/var/www/your-django-project/logs/gunicorn.out.log
```
Restart Supervisor:
```sh
sudo supervisorctl reread
sudo supervisorctl update
sudo supervisorctl start gunicorn
```

---

## **1Ô∏è‚É£4Ô∏è‚É£ Restart Server & Test**
```sh
sudo systemctl restart nginx
sudo systemctl restart gunicorn
```
Now visit **https://yourdomain.com** to check if Django is running!

---

## **üéØ Summary**
| Step | Command |
|------|---------|
| **1. Create Lightsail Instance** | AWS Lightsail Console |
| **2. Connect via SSH** | `ssh ubuntu@your-ip` |
| **3. Update System** | `sudo apt update && sudo apt upgrade -y` |
| **4. Clone Django Project** | `git clone https://github.com/yourusername/yourproject.git` |
| **5. Virtual Environment** | `python3 -m venv venv && source venv/bin/activate` |
| **6. Install Dependencies** | `pip install -r requirements.txt` |
| **7. Configure Database** | PostgreSQL/MySQL Setup |
| **8. Migrate DB** | `python manage.py migrate` |
| **9. Collect Static Files** | `python manage.py collectstatic --noinput` |
| **10. Gunicorn Setup** | `sudo systemctl start gunicorn` |
| **11. Nginx Reverse Proxy** | `sudo systemctl restart nginx` |
| **12. SSL (HTTPS)** | `certbot --nginx -d yourdomain.com` |
| **13. Firewall Setup** | `sudo ufw enable` |
| **14. Restart & Test** | Visit **https://yourdomain.com** |

---
